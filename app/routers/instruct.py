from fastapi import APIRouter, UploadFile, Form, HTTPException
from fastapi.responses import FileResponse
from PIL import Image
from io import BytesIO
import os

# Google Gemini (Flash Image) SDK
from google import genai

router = APIRouter(prefix="/api/instruct", tags=["instruct"])

# Initialize Gemini client once (reads GEMINI_API_KEY from environment)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "").strip()
client = genai.Client(api_key=GEMINI_API_KEY) if GEMINI_API_KEY else genai.Client()

MODEL_NAME = "gemini-2.5-flash-image-preview"


@router.post("/edit")
async def edit_image(file: UploadFile, prompt: str = Form(...)):
    # Read uploaded file
    image_bytes = await file.read()
    try:
        input_image = Image.open(BytesIO(image_bytes)).convert("RGB")
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid image file")

    try:
        # Image editing using Gemini (text + image -> image)
        response = client.models.generate_content(
            model=MODEL_NAME,
            contents=[prompt, input_image],
        )

        output_image = None
        # Extract the generated image bytes
        for part in response.candidates[0].content.parts:
            if getattr(part, "inline_data", None) is not None:
                output_image = Image.open(BytesIO(part.inline_data.data))
                break

        if output_image is None:
            raise HTTPException(status_code=502, detail="No image generated by Gemini")

        # Save and return result
        output_path = "edited.png"
        output_image.save(output_path)
        return FileResponse(output_path, media_type="image/png")

    except HTTPException:
        raise
    except Exception as e:
        # Surface Gemini/SDK errors
        raise HTTPException(status_code=500, detail=f"Gemini error: {str(e)}")